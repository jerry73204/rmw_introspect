#+TITLE: RMW Introspect Development Roadmap
#+AUTHOR: ROS-Plan Contributors
#+DATE: 2025-10-22
#+OPTIONS: toc:2 num:t

* Overview

This roadmap outlines the phased development plan for transforming rmw_introspect
from a recording-only RMW implementation into an intermediate layer that forwards
calls to real RMW implementations via dlopen.

See [[file:architecture.org][Architecture Design]] for the overall design approach and [[file:api-design.org][API Design]] for
detailed API specifications.

* Development Phases

** Phase 0: Research & Design

- [X] Evaluate dlopen approach feasibility
- [X] Design handle wrapping pattern (see [[file:architecture.org::*Pattern 1: Handle Wrapping][architecture.org § Handle Wrapping]])
- [X] Design dlopen loading mechanism (see [[file:architecture.org::*Pattern 2: Dynamic Library Loading][architecture.org § Dynamic Library Loading]])
- [X] Design context propagation strategy
- [X] Design mode detection (see [[file:api-design.org::*Mode Selection Logic][api-design.org § Mode Selection]])
- [X] Define environment variables (see [[file:api-design.org::*Environment Variables API][api-design.org § Environment Variables]])
- [X] Define wrapper structures (see [[file:api-design.org::*Wrapper Structure Definitions][api-design.org § Wrapper Structures]])
- [X] Create design documentation

** Phase 1: Core Infrastructure

Implement foundational components for dlopen-based forwarding. See [[file:implementation-guide.org::*Phase 1: Core Infrastructure][implementation-guide.org § Phase 1]].

*** Header Files

- [X] Create real_rmw.hpp with RealRMW class and ~65 function pointers (see [[file:implementation-guide.org::*1.1: Create real_rmw.hpp][implementation-guide.org § 1.1]])
- [X] Create wrappers.hpp with all wrapper structures (see [[file:api-design.org::*Wrapper Structure Definitions][api-design.org § Wrappers]])
- [X] Create forwarding.hpp with unwrap helpers for all handle types
- [X] Create mode.hpp with global state and mode checking functions

*** Core Components

- [X] Implement RealRMW::load() with dlopen and symbol loading (see [[file:implementation-guide.org::*1.2: Implement real_rmw.cpp][implementation-guide.org § 1.2]])
- [X] Implement RealRMW::unload() with dlclose
- [X] Load all ~65 RMW function pointers with comprehensive error handling
- [X] Implement wrapper constructors/destructors
- [X] Implement global state initialization

*** Initialization Updates

- [X] Add mode detection in rmw_init() (see [[file:api-design.org::*Mode Selection Logic][api-design.org § Mode Selection]])
- [X] Implement initialization guard with mutex and reference counting
- [X] Load real RMW in intermediate mode (see [[file:implementation-guide.org::*1.3: Update rmw_init.cpp for Intermediate Mode][implementation-guide.org § 1.3]])
- [X] Create ContextWrapper and forward init to real RMW
- [X] Update rmw_shutdown() and rmw_context_fini() for intermediate mode
- [X] Unload real RMW on last context finalization

*** Unit Tests

- [X] Test loading rmw_fastrtps_cpp and rmw_cyclonedds_cpp
- [X] Test loading invalid library (expect failure)
- [X] Test recording-only vs intermediate mode detection
- [X] Test init/shutdown in both modes
- [X] Test multiple context initialization and reference counting
- [ ] Verify no memory leaks with valgrind

** Phase 2: Publishers & Subscriptions

Implement forwarding for publisher and subscription operations. See [[file:implementation-guide.org::*Phase 2: Publishers and Subscriptions][implementation-guide.org § Phase 2]].

*** Node Operations

- [X] Update rmw_create_node() to create NodeWrapper and forward to real RMW (see [[file:implementation-guide.org::*2.1: Update rmw_node.cpp][implementation-guide.org § 2.1]])
- [X] Update rmw_destroy_node() to unwrap and forward
- [X] Update rmw_node_get_graph_guard_condition() to forward

*** Publisher Operations

- [X] Update rmw_create_publisher() to extract metadata, unwrap node, forward, and create PublisherWrapper (see [[file:implementation-guide.org::*2.2: Update rmw_publisher.cpp][implementation-guide.org § 2.2]])
- [X] Update rmw_destroy_publisher() to unwrap and forward
- [X] Update rmw_publish() to unwrap and forward
- [X] Update rmw_publish_serialized_message() to forward
- [X] Update rmw_publisher_get_actual_qos() to forward
- [X] Update rmw_publisher_count_matched_subscriptions() to forward
- [X] Update rmw_publisher_assert_liveliness() to forward
- [X] Update rmw_publisher_wait_for_all_acked() to forward

*** Subscription Operations

- [X] Update rmw_create_subscription() to extract metadata, unwrap node, forward, and create SubscriptionWrapper (see [[file:implementation-guide.org::*2.3: Update rmw_subscription.cpp][implementation-guide.org § 2.3]])
- [X] Update rmw_destroy_subscription() to unwrap and forward
- [X] Update rmw_take() to unwrap and forward
- [X] Update rmw_take_with_info() to forward
- [X] Update rmw_take_serialized_message() to forward
- [X] Update rmw_take_serialized_message_with_info() to forward
- [X] Update rmw_subscription_get_actual_qos() to forward
- [X] Update rmw_subscription_count_matched_publishers() to forward

*** Integration Tests

- [X] Test publisher creation, destruction, publish, and QoS queries with FastRTPS
- [X] Test subscription creation, destruction, take operations with FastRTPS
- [X] Create talker/listener test with message passing through rmw_introspect (see [[file:implementation-guide.org::*2.4: Integration Test: Talker/Listener][implementation-guide.org § 2.4]])
- [X] Verify introspection data recorded for all interfaces
- [ ] Measure and verify latency overhead < 5% vs native RMW
- [ ] Verify no memory leaks

** Phase 3: Services & Clients

Implement forwarding for service and client operations. See [[file:implementation-guide.org::*Phase 3: Services and Clients][implementation-guide.org § Phase 3]].

*** Service Operations

- [X] Update rmw_create_service() to extract metadata, unwrap node, forward, and create ServiceWrapper (see [[file:implementation-guide.org::*3.1: Update rmw_service.cpp][implementation-guide.org § 3.1]])
- [X] Update rmw_destroy_service() to unwrap and forward
- [X] Update rmw_take_request() to unwrap and forward
- [X] Update rmw_send_response() to unwrap and forward
- [X] Update rmw_service_request_subscription_get_actual_qos() to forward
- [X] Update rmw_service_response_publisher_get_actual_qos() to forward

*** Client Operations

- [X] Update rmw_create_client() to extract metadata, unwrap node, forward, and create ClientWrapper (see [[file:implementation-guide.org::*3.2: Update rmw_client.cpp][implementation-guide.org § 3.2]])
- [X] Update rmw_destroy_client() to unwrap and forward
- [X] Update rmw_send_request() to unwrap and forward
- [X] Update rmw_take_response() to unwrap and forward
- [X] Update rmw_client_request_publisher_get_actual_qos() to forward
- [X] Update rmw_client_response_subscription_get_actual_qos() to forward

*** Integration Tests

- [X] Test service creation, destruction, and operations with FastRTPS
- [X] Test client creation, destruction, and operations with FastRTPS
- [X] Create AddTwoInts service/client test with request/response passing (see [[file:implementation-guide.org::*3.3: Integration Test: AddTwoInts][implementation-guide.org § 3.3]])
- [X] Verify introspection data recorded for services and clients
- [ ] Measure and verify latency overhead < 5% vs native RMW
- [ ] Test timeout handling and multiple requests

** Phase 4: Advanced Features

Implement forwarding for wait sets, guard conditions, and graph queries. See [[file:implementation-guide.org::*Phase 4: Advanced Features][implementation-guide.org § Phase 4]].

*** Guard Conditions

- [X] Update rmw_create_guard_condition() to unwrap context, forward, and create GuardConditionWrapper
- [X] Update rmw_destroy_guard_condition() to unwrap and forward
- [X] Update rmw_trigger_guard_condition() to unwrap and forward

*** Wait Sets

- [X] Update rmw_create_wait_set() to unwrap context, forward, and create WaitSetWrapper
- [X] Update rmw_destroy_wait_set() to unwrap and forward
- [X] Update rmw_wait() to unwrap wait set and all handle arrays, forward, and update ready flags (see [[file:implementation-guide.org::*4.2: Implement rmw_wait Forwarding][implementation-guide.org § 4.2 rmw_wait]])

*** Graph Queries

- [X] Update rmw_get_node_names() and rmw_get_node_names_with_enclaves() to forward
- [X] Update rmw_get_topic_names_and_types() and rmw_get_service_names_and_types() to forward
- [X] Update rmw_get_publisher/subscriber/service/client_names_and_types_by_node() to forward
- [X] Update rmw_count_publishers/subscribers/clients/services() to forward
- [X] Update rmw_get_gid_for_publisher/client() and rmw_compare_gids_equal() to forward

*** Event Operations

- [X] Update rmw_publisher_event_init() to forward
- [X] Update rmw_subscription_event_init() to forward
- [X] Update rmw_take_event() to forward
- [X] Update rmw_event_fini() to forward

*** Integration Tests

- [X] Test wait set creation/destruction and waiting on single/multiple entities
- [X] Test guard condition triggering and wait set integration
- [X] Test graph queries and compare with native RMW results
- [X] Create complex multi-node system test with mixed entities (see [[file:implementation-guide.org::*4.4: Complex System Test][implementation-guide.org § 4.4]])
- [ ] Stress test with high message rates

** Phase 5: Serialization & Advanced QoS

Optional phase for completeness.

*** Serialization

- [X] Update rmw_serialize() to forward to real RMW
- [X] Update rmw_deserialize() to forward to real RMW
- [X] Update rmw_get_serialized_message_size() to forward

*** Loaned Messages

- [X] Update rmw_borrow_loaned_message() and rmw_return_loaned_message_from_publisher() to forward
- [X] Update rmw_take_loaned_message() and rmw_return_loaned_message_from_subscription() to forward
- [X] Handle unsupported case gracefully in recording-only mode

*** Tests

- [X] Test serialize/deserialize with various message types
- [X] Test loaned messages if supported by backend RMW
- [X] Verify proper memory management

** Phase 6: Testing & Validation

Comprehensive testing across multiple RMW implementations and ROS 2 distributions.

*** Compatibility Testing

- [X] Create compatibility test script (run_compatibility_tests.sh)
- [ ] Run full test suite with rmw_fastrtps_cpp backend (pending build env)
- [ ] Run full test suite with rmw_cyclonedds_cpp backend (pending build env)
- [ ] Run full test suite with rmw_connextdds backend (pending build env)
- [ ] Run full test suite with rmw_zenoh_cpp backend (pending build env)
- [ ] Test on ROS 2 Humble, Iron, and Jazzy (pending build env)
- [X] Document compatibility matrix (COMPATIBILITY_MATRIX.md)

*** Performance Benchmarking

- [X] Create pub-sub latency benchmark (benchmark_pubsub_latency.cpp)
- [ ] Measure pub-sub latency and compare with native RMW (pending execution)
- [ ] Measure service-client latency and compare with native RMW (pending)
- [X] Create stress test for publish rate and rapid cycles (stress_test.cpp)
- [ ] Measure max publish rate and service request rate (pending execution)
- [ ] Measure memory overhead per handle and total usage (pending)
- [ ] Measure dlopen and context initialization overhead (pending)
- [ ] Run with valgrind for leak detection (pending)
- [ ] Generate performance reports and graphs (pending)

*** Real-World Testing

- [ ] Test with complex ROS 2 applications (Nav2, MoveIt2, perception pipelines)
- [ ] Test with multi-robot systems
- [X] Create stress test infrastructure (stress_test.cpp)
- [ ] Run stress tests for extended periods (24+ hours) (pending execution)
- [ ] Test high-frequency message passing and rapid create/destroy cycles (pending)
- [ ] Check for memory leaks and deadlocks (pending)

*** Testing Infrastructure

- [X] Create 12 GTest suites for phases 1-5
- [X] Create compatibility testing script
- [X] Create performance benchmark programs
- [X] Create stress test programs
- [X] Add benchmark and stress test executables to CMakeLists.txt
- [X] Create comprehensive testing documentation (TESTING.md)
- [X] Document build environment requirements

*** Bug Fixes and Refinement

- [ ] Triage and fix all bugs found in testing (pending test execution)
- [ ] Profile hot paths and optimize critical sections (pending)
- [ ] Reduce allocations and cache frequently-used data (pending)
- [X] Document known limitations and workarounds (in TESTING.md and COMPATIBILITY_MATRIX.md)

** Phase 7: Documentation & Release Preparation

Prepare for public release.

*** Documentation Updates

- [ ] Update README.md with intermediate layer usage and RMW_INTROSPECT_DELEGATE_TO
- [ ] Update rmw_introspect_cpp/README.md with architecture changes
- [ ] Create comprehensive user guide covering both modes
- [ ] Create developer guide with internal architecture and contributing guidelines
- [ ] Update design documents with implementation notes and lessons learned
- [ ] Add Doxygen comments to all public APIs and wrapper structures
- [ ] Generate HTML API documentation with Doxygen

*** Examples and Tutorials

- [ ] Create example programs (talker/listener, service/client, multi-node)
- [ ] Write getting started tutorial
- [ ] Write tutorial for using with existing ROS 2 nodes
- [ ] Write troubleshooting guide

*** Release Preparation

- [ ] Set version to 0.2.0 and update CHANGELOG.md
- [ ] Tag release and create GitHub release
- [ ] Verify package.xml and test installation on clean system
- [ ] Set up GitHub Actions CI/CD for multiple ROS 2 distros
- [ ] Add test jobs and coverage reporting

*** Community Engagement

- [ ] Write release announcement
- [ ] Post to ROS Discourse and GitHub discussions
- [ ] Notify ROS-Plan maintainers
- [ ] Monitor issue tracker and gather feedback

* Timeline & Effort Estimates

| Phase | Description                | Estimated Effort |
|-------+----------------------------+------------------|
|     0 | Research & Design          | 2-3 days         |
|     1 | Core Infrastructure        | 3-4 days         |
|     2 | Publishers & Subscriptions | 6-7 days         |
|     3 | Services & Clients         | 5 days           |
|     4 | Advanced Features          | 6-7 days         |
|     5 | Serialization & QoS        | 2-3 days         |
|     6 | Testing & Validation       | 10-12 days       |
|     7 | Documentation & Release    | 8-10 days        |
|-------+----------------------------+------------------|
|       | *TOTAL*                    | *42-56 days*     |

Target release: End of January 2026

* Success Criteria

** Technical Requirements

- [ ] All RMW functions forwarded correctly
- [ ] Latency overhead < 5%
- [ ] Throughput within 95% of native
- [ ] Memory overhead < 100 bytes per handle
- [ ] Zero memory leaks (valgrind clean)
- [ ] Zero known crashes

** Quality Requirements

- [ ] Test coverage > 80%
- [ ] All integration tests pass
- [ ] Works with 3+ real RMW implementations
- [ ] Works on 3+ ROS 2 distributions
- [ ] Documentation complete

* Risk Factors & Mitigation

** High Risk

- [ ] Compatibility issues with specific RMW implementations
  - *Mitigation*: Test with real RMW implementations from Phase 1
- [ ] Unforeseen API incompatibilities
  - *Mitigation*: Incremental development and thorough testing per phase
- [ ] Complex wait set unwrapping bugs
  - *Mitigation*: Extensive unit tests and edge case coverage

** Medium Risk

- [ ] Performance overhead exceeds 5% target
  - *Mitigation*: Profile and optimize after each phase
- [ ] Memory leaks in edge cases
  - *Mitigation*: Run valgrind continuously during development
- [ ] Real-world application incompatibilities
  - *Mitigation*: Early testing with Nav2/MoveIt2

* Dependencies

** External

- ROS 2 distribution (Humble, Iron, Jazzy)
- At least one real RMW implementation (FastRTPS or CycloneDDS)
- dlopen/dlsym support (standard on Linux)
- C++17 compiler
- CMake 3.5+

** Internal

- Phase 1 must complete before Phase 2
- Phases 2-5 can partially overlap (different files)
- Phase 6 requires Phases 1-5 complete
- Phase 7 requires Phase 6 complete

* References

- [[file:architecture.org][Architecture Design Document]]
- [[file:api-design.org][API Design Document]]
- [[file:implementation-guide.org][Implementation Guide]]
